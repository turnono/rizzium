name: Rizz Social CI/CD

on:
  pull_request:
    branches:
      - main
    paths:
      - 'apps/rizz-social/**'
      - 'libs/shared/**'
      - 'firebase.rizz-social-firebase.json'
      - '.github/workflows/rizz-social.yml'
      - 'setup-app.sh'
      - 'package.json'
env:
  APP_NAME: rizz-social
  FIREBASE_PROJECT_ID: ${{ secrets.RIZZ_SOCIAL_FIREBASE_PROJECT_ID }}
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Cache
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/.npm
            node_modules
            .nx/cache
            dist
          key: ${{ runner.os }}-${{ env.APP_NAME }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.APP_NAME }}-

      - name: Create .npmrc
        run: |
          echo "legacy-peer-deps=true" >> .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          echo "resolution[@typescript-eslint/eslint-plugin]=latest" >> .npmrc
          echo "resolution[@typescript-eslint/parser]=latest" >> .npmrc
          echo "resolution[glob]=^9.0.0" >> .npmrc
          echo "resolution[rimraf]=^5.0.0" >> .npmrc
          echo "resolution[eslint]=^9.0.0" >> .npmrc
          echo "resolution[@grpc/grpc-js]=^1.8.22" >> .npmrc
          echo "resolution[node-fetch]=^2.6.7" >> .npmrc
          echo "resolution[protobufjs]=^7.2.4" >> .npmrc
          echo "resolution[tough-cookie]=^4.1.3" >> .npmrc

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json dist .nx/cache
          npm install --no-audit --legacy-peer-deps
          npm install @rollup/rollup-linux-x64-gnu@4.9.5 --save-dev --no-audit --legacy-peer-deps
          npm install @angular/core@18.2.0 @angular/common@18.2.0 @angular/platform-browser@18.2.0 @angular/platform-browser-dynamic@18.2.0 --save --no-audit --legacy-peer-deps
          npm install @angular/cli@18.2.0 @angular-devkit/core@18.2.0 @angular-devkit/schematics@18.2.0 --save-dev --no-audit --legacy-peer-deps
          npm install @angular-devkit/build-angular@18.2.0 --save-dev --no-audit --legacy-peer-deps
          npm install @angular/compiler@18.2.0 @angular/compiler-cli@18.2.0 --save-dev --no-audit --legacy-peer-deps
          npm install @nx/angular@18.0.8 --save-dev --no-audit --legacy-peer-deps
          npm dedupe
          npm audit fix --force || true

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@13.16.0

      - uses: nrwl/nx-set-shas@v4

      # Build Angular app - NX will handle all dependencies
      - name: Build Angular app
        run: |
          echo "Angular versions:"
          npm list @angular/core @angular-devkit/build-angular @angular/cli || true
          NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx build ${{ env.APP_NAME }} --configuration=production --verbose

      # Build Firebase components - NX will handle all dependencies
      - name: Build Firebase
        run: |
          echo "Building firebase project..."
          NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx build ${{ env.APP_NAME }}-firebase --verbose

          echo "Building all Firebase functions..."
          NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx run-many --target=build --projects=tag:firebase:dep:${{ env.APP_NAME }}-firebase --verbose

      # Authenticate with service account
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.RIZZ_SOCIAL_GCP_SA_KEY }}

      # Deploy
      - name: Deploy to Firebase
        run: |
          echo "Starting deployment with debug info..."

          # Print Firebase debug info
          firebase --version
          firebase projects:list

          # Run deployment with maximum verbosity and debug flags
          FIREBASE_DEBUG=true DEBUG="@firebase/*" npx nx deploy ${{ env.APP_NAME }}-firebase --verbose

          # If deployment fails, check Firebase debug log
          if [ $? -ne 0 ]; then
            echo "Deployment failed. Firebase debug log:"
            cat firebase-debug.log
            exit 1
          fi
        env:
          DEBUG: '*'
