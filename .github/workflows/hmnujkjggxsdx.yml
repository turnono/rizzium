name: hmnujkjggxsdx CI/CD

on:
  pull_request:
    branches:
      - main
    paths:
      - 'apps/hmnujkjggxsdx/**' # Only the app
      - 'libs/shared/**' # Shared libraries used by app
      - 'firebase.hmnujkjggxsdx-firebase.json'
      - '.github/workflows/hmnujkjggxsdx.yml'
      - 'setup-app.sh'
      - 'package.json'
env:
  APP_NAME: hmnujkjggxsdx
  FIREBASE_PROJECT_ID: ${{ secrets.HMNUJKJGGXSDX_FIREBASE_PROJECT_ID }}
  ACTIONS_RUNNER_DEBUG: true # Enable runner diagnostic logging
  ACTIONS_STEP_DEBUG: true # Enable step debug logging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/.npm
            node_modules
            .nx/cache
            dist
          key: ${{ runner.os }}-${{ env.APP_NAME }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.APP_NAME }}-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@13.16.0

      - name: Connect to Nx Cloud
        run: npx nx connect-to-nx-cloud

      - uses: nrwl/nx-set-shas@v4

      # Build Angular app - NX will handle all dependencies
      - name: Build Angular app
        run: npx nx build ${{ env.APP_NAME }} --prod

      # Build Firebase components - NX will handle all dependencies
      - name: Build Firebase
        run: |
          echo "Building firebase project..."
          npx nx build ${{ env.APP_NAME }}-firebase --verbose

          echo "Building all Firebase functions..."
          npx nx run-many --target=build --projects=tag:firebase:dep:${{ env.APP_NAME }}-firebase --verbose

      # Authenticate with service account - now runs on PR
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.HMNUJKJGGXSDX_GCP_SA_KEY }}

      # Setup and Verify GCP Credentials
      - name: Setup and Verify GCP Credentials
        run: |
          # Create credentials file
          echo "${{ secrets.HMNUJKJGGXSDX_GCP_SA_KEY }}" > /tmp/gcp.base64

          # Check base64 content (first few chars safely)
          echo "First few chars of base64: $(head -c 10 /tmp/gcp.base64)..."

          # Attempt to decode
          cat /tmp/gcp.base64 | base64 -d > /tmp/gcp.json || {
            echo "Failed to decode base64"
            echo "Input appears to be invalid base64"
            exit 1
          }

          # Verify JSON structure
          if jq -e . >/dev/null 2>&1 < /tmp/gcp.json; then
            echo "✓ Valid JSON structure"
            echo "✓ Service account email: $(jq -r .client_email /tmp/gcp.json)"
            echo "✓ Project ID: $(jq -r .project_id /tmp/gcp.json)"
            chmod 600 /tmp/gcp.json
          else
            echo "× Invalid JSON structure"
            exit 1
          fi

      # Deploy
      - name: Deploy to Firebase
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp.json
          FIREBASE_PROJECT_ID: ${{ secrets.HMNUJKJGGXSDX_FIREBASE_PROJECT_ID }}
          DEBUG: '*'
          FIREBASE_DEBUG: true
        run: |
          # Save credentials
          echo '${{ secrets.HMNUJKJGGXSDX_GCP_SA_KEY }}' > /tmp/gcp.json
          chmod 600 /tmp/gcp.json

          # Verify credentials file
          if [ -f /tmp/gcp.json ]; then
            echo "✓ Credentials file created"
            echo "✓ Service account: $(jq -r .client_email /tmp/gcp.json)"
          else
            echo "× Failed to create credentials file"
            exit 1
          fi

          # Install and verify Firebase CLI
          npm install -g firebase-tools
          firebase projects:list

          # Run deployment
          echo "Deploying to project: $FIREBASE_PROJECT_ID"
          npx nx deploy ${{ env.APP_NAME }}-firebase --verbose
