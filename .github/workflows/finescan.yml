name: finescan CI/CD

on:
  pull_request:
    branches:
      - main
    paths:
      - 'apps/finescan/**' # Only the finescan app
      - 'libs/shared/**' # Shared libraries used by finescan
      - 'firebase.finescan-firebase.json'
      - '.github/workflows/finescan.yml'
      - 'setup-app.sh'
      - 'package.json'
env:
  APP_NAME: finescan
  FIREBASE_PROJECT_ID: ${{ secrets.FINESCAN_FIREBASE_PROJECT_ID }}
  ACTIONS_RUNNER_DEBUG: true # Enable runner diagnostic logging
  ACTIONS_STEP_DEBUG: true # Enable step debug logging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PAYSTACK_SECRET_KEY: ${{ secrets.FINESCAN_PAYSTACK_SECRET_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache
        uses: actions/cache@v4.1.2
        with:
          path: |
            ~/.npm
            node_modules
            .nx/cache
            dist
          key: ${{ runner.os }}-${{ env.APP_NAME }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.APP_NAME }}-

      - name: Create .npmrc
        run: |
          echo "legacy-peer-deps=true" >> .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          echo "resolution[@typescript-eslint/eslint-plugin]=latest" >> .npmrc
          echo "resolution[@typescript-eslint/parser]=latest" >> .npmrc

      - name: Install dependencies
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          echo "@typescript-eslint/eslint-plugin@latest:resolution=force" >> .npmrc
          echo "@typescript-eslint/parser@latest:resolution=force" >> .npmrc
          echo "@rollup/rollup-linux-x64-gnu@4.9.5:resolution=force" >> .npmrc

          rm -rf node_modules package-lock.json
          npm install
          npm audit fix

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@13.16.0

      - uses: nrwl/nx-set-shas@v4

      # Build Angular app - NX will handle all dependencies
      - name: Build Angular app
        run: NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx build ${{ env.APP_NAME }} --prod --verbose

      # Build Firebase components - NX will handle all dependencies
      - name: Build Firebase
        run: |
          echo "Building firebase project..."
          NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx build ${{ env.APP_NAME }}-firebase --verbose

          echo "Building all Firebase functions..."
          NX_SKIP_NX_CACHE=true NX_CLOUD_DISTRIBUTED_EXECUTION=false NX_NO_CLOUD=true NX_DAEMON=false npx nx run-many --target=build --projects=tag:firebase:dep:${{ env.APP_NAME }}-firebase --verbose

      # Create .env files for all Firebase Functions
      - name: Setup Environment Variables
        run: |
          # Create .env file for payment function
          echo "PAYSTACK_SECRET_KEY=${{ secrets.FINESCAN_PAYSTACK_SECRET_KEY }}" > apps/finescan/functions/payment/.env

          # Copy .env file to the dist directory where the function will be deployed from
          mkdir -p dist/apps/finescan/functions/payment
          cp apps/finescan/functions/payment/.env dist/apps/finescan/functions/payment/.env

      # Authenticate with service account
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FINESCAN_GCP_SA_KEY }}

      # Deploy
      - name: Deploy to Firebase
        run: |
          echo "Starting deployment with debug info..."
          firebase --version
          firebase projects:list
          firebase use ${{ env.FIREBASE_PROJECT_ID }}

          # Run deployment with maximum verbosity and debug flags
          FIREBASE_DEBUG=true DEBUG="@firebase/*" npx nx deploy ${{ env.APP_NAME }}-firebase --verbose

          # If deployment fails, check Firebase debug log
          if [ $? -ne 0 ]; then
            echo "Deployment failed. Firebase debug log:"
            cat firebase-debug.log
            exit 1
          fi
        env:
          DEBUG: '*'
