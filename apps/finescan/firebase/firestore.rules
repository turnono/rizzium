rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function hasRole(role, userId) {
      return isSignedIn() &&
        (exists(/databases/$(database)/documents/users/$(userId)) ?
          get(/databases/$(database)/documents/users/$(userId)).data.role == role :
          role == 'user');
    }

    function isAdmin(userId) {
      return hasRole('admin', userId);
    }

    function hasActiveSubscription(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists ?
        (userDoc.data.subscriptionStatus == 'active' && userDoc.data.subscriptionEndDate > request.time) :
        false;
    }

    function getUserTier(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists ? userDoc.data.tier : 'free';
    }

    function getScansUsed(userId) {
      let usagePath = /databases/$(database)/documents/users/$(userId)/usage/current;
      return exists(usagePath) ? get(usagePath).data.scansUsed : 0;
    }

    function getStorageUsed(userId) {
      let usagePath = /databases/$(database)/documents/users/$(userId)/usage/current;
      return exists(usagePath) ? get(usagePath).data.storageUsed : 0;
    }

    function isValidScansIncrement(currentData, newData) {
      let diff = newData.scansUsed - currentData.scansUsed;
      // Only allow increment by 1 or reset to 0
      return diff == 1 || newData.scansUsed == 0;
    }

    function isMonthlyReset(currentData, newData) {
      return newData.scansUsed == 0 &&
             newData.lastResetDate != currentData.lastResetDate &&
             newData.tier == currentData.tier;
    }

    function isValidStorageUpdate(currentData, newData) {
      return newData.storageUsed >= currentData.storageUsed ||
             (newData.storageUsed == 0 && isMonthlyReset(currentData, newData));
    }

    // Users collection and subcollections
    match /users/{userId} {
      // Allow read of own document
      allow read: if isSignedIn() && request.auth.uid == userId;

      // Allow creation of initial user document
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow updates to own document
      allow update: if isOwner(userId) || isAdmin(userId);

      // Only admins can delete
      allow delete: if isAdmin(userId);

      // User settings
      match /settings/{settingId} {
        allow read, write: if isOwner(userId);
      }

      // Subscriptions collection
      match /subscriptions/{subscriptionId} {
        allow read: if isOwner(userId);
        allow write: if isAdmin(userId) || (isOwner(userId) && subscriptionId == 'current');
      }

      // Transactions collection
      match /transactions/{transactionId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.keys().hasAll(['reference', 'status', 'amount', 'planId', 'createdAt', 'customerEmail', 'metadata']);
        allow update: if false;
        allow delete: if false;
      }

      // Usage tracking with scan counting
      match /usage/{usageId} {
        allow read: if isOwner(userId);

        // Allow creation of initial usage document
        allow create: if isOwner(userId) && (
          (!exists(/databases/$(database)/documents/users/$(userId)/usage/$(usageId)) &&
           request.resource.data.scansUsed == 0 &&
           request.resource.data.storageUsed == 0)
        );

        // Allow updates with strict validation
        allow update: if isOwner(userId) && (
          // Ensure all required fields are present
          request.resource.data.keys().hasAll(['scansUsed', 'scansLimit', 'storageUsed', 'storageLimit', 'retentionDays', 'lastResetDate', 'tier']) &&
          (
            // Allow complete reset during subscription changes
            (request.resource.data.scansUsed == 0 && request.resource.data.storageUsed == 0) ||
            // Normal usage updates
            (
              // Validate scans increment
              (request.resource.data.scansUsed == resource.data.scansUsed + 1 ||
               request.resource.data.scansUsed == 0) &&
              // Validate storage updates
              request.resource.data.storageUsed >= 0
            )
          )
        );

        allow delete: if isAdmin(userId);
      }

      // Analyses collection with usage tracking
      match /analyses/{analysisId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.status == 'pending';
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }

    // Products and pricing - publicly readable
    match /products/{id} {
      allow read: if true;
      match /prices/{id} {
        allow read: if true;
      }
      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // Stripe customers
    match /stripe_customers/{uid} {
      allow read: if request.auth.uid == uid;
      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    // Analytics collection
    match /analytics/{docId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['userId', 'eventType', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // User analytics subcollection
    match /users/{userId}/analytics/{docId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['eventType', 'timestamp']);
      allow update: if false;
      allow delete: if false;
    }

    // Event tracking collection
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['userId', 'type', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Payment events collection
    match /payment_events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['userId', 'type', 'timestamp', 'status']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Pricing events collection
    match /pricing_events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['userId', 'type', 'timestamp', 'planId', 'planTier']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Payment tracking collection
    match /payment_tracking/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['userId', 'type', 'timestamp', 'status']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Analytics collection rules
    match /analytics/{type}/events/{eventId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin(request.auth.uid);
    }
  }
}
