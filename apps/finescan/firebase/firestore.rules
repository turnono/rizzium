rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function hasRole(role, userId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == role;
    }

    function isAdmin(userId) {
      return hasRole('admin', userId);
    }

    function hasActiveSubscription(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists && userDoc.data.subscriptionStatus == 'active' && userDoc.data.subscriptionEndDate > request.time;
    }

    function getUserTier(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists ? userDoc.data.tier : 'free';
    }

    function getScansUsed(userId) {
      let usagePath = /databases/$(database)/documents/users/$(userId)/usage/current;
      return exists(usagePath) ? get(usagePath).data.scansUsed : 0;
    }

    function getStorageUsed(userId) {
      let usagePath = /databases/$(database)/documents/users/$(userId)/usage/current;
      return exists(usagePath) ? get(usagePath).data.storageUsed : 0;
    }

    function isWithinUsageLimit(userId) {
      let tier = getUserTier(userId);
      let scans = getScansUsed(userId);

      return tier == 'business' ||
             (tier == 'free' && scans < 3) ||
             (tier == 'basic' && scans < 20) ||
             (tier == 'pro' && scans < 100);
    }

    function isWithinStorageLimit(userId) {
      let tier = getUserTier(userId);
      let used = getStorageUsed(userId);
      let storageLimit =
        tier == 'free' ? 50 * 1024 * 1024 :
        tier == 'basic' ? 200 * 1024 * 1024 :
        tier == 'pro' ? 1024 * 1024 * 1024 :
        tier == 'business' ? null : 0;

      return storageLimit == null || used < storageLimit;
    }

    // Users collection and subcollections
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId && (
        !exists(/databases/$(database)/documents/users/$(userId))
      );
      allow update: if isOwner(userId) || isAdmin(userId);
      allow delete: if isAdmin(userId);

      // User settings
      match /settings/{settingId} {
        allow read, write: if isOwner(userId);
      }

      // Subscription management
      match /subscriptions/{subscriptionId} {
        allow read: if isOwner(userId);
        allow write: if isAdmin(userId);
      }

      // Usage tracking
      match /usage/{usageId} {
        allow read: if isOwner(userId);
        // Allow creation of initial usage document
        allow create: if isOwner(userId) && (
          !exists(/databases/$(database)/documents/users/$(userId)/usage/$(usageId)) &&
          request.resource.data.scansUsed == 0 &&
          request.resource.data.storageUsed == 0 &&
          request.resource.data.tier == 'free'
        );
        // Allow updates within limits
        allow update: if isAdmin(userId) || (
          isOwner(userId) &&
          request.resource.data.scansUsed <= (resource.data.scansUsed + 1) &&
          request.resource.data.storageUsed >= 0 &&
          request.resource.data.storageUsed <= (
            getUserTier(userId) == 'free' ? 50 * 1024 * 1024 :
            getUserTier(userId) == 'basic' ? 200 * 1024 * 1024 :
            getUserTier(userId) == 'pro' ? 1024 * 1024 * 1024 :
            getUserTier(userId) == 'business' ? 1024 * 1024 * 1024 * 10 : 0
          )
        );
        allow delete: if isAdmin(userId);
      }

      // Analyses collection
      match /analyses/{analysisId} {
        allow read: if isOwner(userId);
        // Allow creation of new analysis if within usage limits or it's the first analysis
        allow create: if isOwner(userId) && (
          !exists(/databases/$(database)/documents/users/$(userId)/usage/current) ||
          (isWithinUsageLimit(userId) && isWithinStorageLimit(userId))
        );
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }

    // Products and pricing
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // Stripe customers
    match /stripe_customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }
  }
}
